<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Beginner on Tutorial Island</title><link>https://tutorial-island.github.io/tags/beginner/</link><description>Recent content in Beginner on Tutorial Island</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 29 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://tutorial-island.github.io/tags/beginner/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing a Simple Caesar Cipher in C#</title><link>https://tutorial-island.github.io/posts/article-20250429012041/</link><pubDate>Tue, 29 Apr 2025 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250429012041/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today we are going to implement a simple Caesar cipher in C#. A Caesar cipher is a type of substitution cipher where each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. This is a classic introductory problem to cryptography and provides a good exercise in character manipulation and modular arithmetic.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>The Caesar cipher, while simple, presents a few key challenges:&lt;/p></description></item><item><title>Building a Simple URL Shortener in Elixir</title><link>https://tutorial-island.github.io/posts/article-20250425082635/</link><pubDate>Fri, 25 Apr 2025 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250425082635/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we&amp;rsquo;re going to build a very simple URL shortener in Elixir. Imagine you have a really long URL, something like &lt;code>https://www.example.com/very/long/path/with/lots/of/parameters?utm_source=newsletter&amp;amp;utm_medium=email&amp;amp;utm_campaign=promotion&lt;/code>. We want to create a shorter, more manageable URL that redirects to this original one. We&amp;rsquo;ll focus on the core logic of generating a short code and associating it with the long URL, without delving into database persistence or web frameworks.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>The core challenge of a URL shortener lies in generating unique short codes and associating them with their corresponding long URLs. For this example, we&amp;rsquo;ll focus on generating a short code from a seed.&lt;/p></description></item><item><title>Implementing a Simple Text-Based Adventure Game</title><link>https://tutorial-island.github.io/posts/article-20250416012010/</link><pubDate>Wed, 16 Apr 2025 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250416012010/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we&amp;rsquo;re going to create a rudimentary text-based adventure game. The player will start in a room and will be able to choose directions (north, south, east, west) to move to different rooms. This is a classic introductory programming exercise that demonstrates fundamental concepts like input/output, conditional logic, and functions.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>Building a text adventure game presents several challenges:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Handling Player Input:&lt;/strong> We need a way to get input from the player (their chosen direction). This involves using Python&amp;rsquo;s &lt;code>input()&lt;/code> function.&lt;/p></description></item><item><title>Implementing a Simple Stack in C++</title><link>https://tutorial-island.github.io/posts/article-20250413024613/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250413024613/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today we are going to implement a simple stack data structure in C++ using an array as the underlying storage. A stack is a fundamental data structure that follows the Last-In, First-Out (LIFO) principle. This means the last element added to the stack is the first element removed. We will implement the core operations of a stack: &lt;code>push&lt;/code> (add an element), &lt;code>pop&lt;/code> (remove an element), and &lt;code>peek&lt;/code> (view the top element).&lt;/p></description></item><item><title>Implementing a Simple Palindrome Checker in JavaScript</title><link>https://tutorial-island.github.io/posts/article-20250412164914/</link><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250412164914/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we&amp;rsquo;re diving into a classic problem: building a palindrome checker in JavaScript. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward (ignoring spaces, punctuation, and capitalization). Examples include &amp;ldquo;madam,&amp;rdquo; &amp;ldquo;racecar,&amp;rdquo; and &amp;ldquo;A man, a plan, a canal: Panama.&amp;rdquo; We&amp;rsquo;ll write a function that determines whether a given string is a palindrome.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>The challenge with palindrome checking lies in pre-processing the input string. We need to:&lt;/p></description></item><item><title>Building a Simple Grade Calculator in Python</title><link>https://tutorial-island.github.io/posts/article-20250424012003/</link><pubDate>Thu, 29 Feb 2024 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250424012003/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we&amp;rsquo;re going to build a simple grade calculator using Python. This calculator will take a student&amp;rsquo;s scores on different assignments as input, calculate the average score, and then assign a letter grade based on the average. This exercise will give you practical experience in handling user input, processing data, and making decisions using conditional statements.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>Building a grade calculator presents several challenges:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Input Handling:&lt;/strong> We need to accept input from the user, which will likely be in the form of a string. We need to convert this string into numerical data that we can work with.&lt;/li>
&lt;li>&lt;strong>Data Validation:&lt;/strong> We should validate the input to ensure that the scores are within a valid range (e.g., 0-100).&lt;/li>
&lt;li>&lt;strong>Calculation:&lt;/strong> We need to calculate the average score from the list of individual scores.&lt;/li>
&lt;li>&lt;strong>Grading:&lt;/strong> We need to assign a letter grade based on the calculated average, using a predefined grading scale.&lt;/li>
&lt;/ul>
&lt;p>To address these challenges, we will leverage the following Python functionalities:&lt;/p></description></item><item><title>Haskell - Implementing a Simple Caesar Cipher</title><link>https://tutorial-island.github.io/posts/article-20250403211404/</link><pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250403211404/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we&amp;rsquo;re going to implement a classic cryptographic algorithm: the Caesar cipher. This cipher shifts each letter in a message by a fixed number of positions down the alphabet. While not secure, it provides a great way to learn about character manipulation and basic functional programming concepts in Haskell. We&amp;rsquo;ll take a plain text message and encrypt it using a key (the shift value), and also be able to decrypt back to the original message.&lt;/p></description></item><item><title>Building a Simple Text-Based Adventure Game in C++</title><link>https://tutorial-island.github.io/posts/article-20250404153041/</link><pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250404153041/</guid><description>&lt;h1 id="building-a-simple-text-based-adventure-game-in-c">Building a Simple Text-Based Adventure Game in C++&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we&amp;rsquo;re going to embark on a journey to create a rudimentary text-based adventure game using C++. Imagine a scenario where the player is lost in a dark forest and needs to find their way out. The player will be presented with choices at each step, and their decisions will determine their fate. This project will introduce you to fundamental C++ concepts in a fun and engaging way.&lt;/p></description></item><item><title>Implementing a Simple Text-Based Adventure Game in Rust</title><link>https://tutorial-island.github.io/posts/article-20250424133141/</link><pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250424133141/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we&amp;rsquo;re diving into Rust by building a simple text-based adventure game! This game will allow the user to navigate through a story by making choices, and the story will progress based on those choices. This is a great way to understand fundamental Rust concepts in a fun and engaging way.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>Creating a text-based adventure game presents several challenges:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>User Input:&lt;/strong> We need to read input from the user, allowing them to choose actions or answer questions. Rust&amp;rsquo;s standard input/output library (&lt;code>std::io&lt;/code>) will be crucial here.&lt;/li>
&lt;li>&lt;strong>Game State:&lt;/strong> We need to maintain the current state of the game, such as the player&amp;rsquo;s location, inventory, and health. This requires using appropriate data structures like structs and enums.&lt;/li>
&lt;li>&lt;strong>Conditional Logic:&lt;/strong> The game&amp;rsquo;s narrative will branch based on the user&amp;rsquo;s choices. &lt;code>if&lt;/code>, &lt;code>else if&lt;/code>, and &lt;code>match&lt;/code> statements will be essential for implementing this branching logic.&lt;/li>
&lt;li>&lt;strong>Output:&lt;/strong> We need to display information to the user, telling them about their surroundings, the consequences of their actions, and the current game state. We&amp;rsquo;ll use &lt;code>println!&lt;/code> for this.&lt;/li>
&lt;/ol>
&lt;p>We will use these Rust features to tackle these challenges:&lt;/p></description></item></channel></rss>