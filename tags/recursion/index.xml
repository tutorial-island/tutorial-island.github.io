<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recursion on Tutorial Island</title><link>https://tutorial-island.github.io/tags/recursion/</link><description>Recent content in Recursion on Tutorial Island</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 30 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://tutorial-island.github.io/tags/recursion/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing a Simple Caesar Cipher in Haskell</title><link>https://tutorial-island.github.io/posts/article-20250430012046/</link><pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250430012046/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we&amp;rsquo;re going to implement a simple Caesar cipher in Haskell. A Caesar cipher is a type of substitution cipher where each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 3, &amp;lsquo;A&amp;rsquo; would be replaced by &amp;lsquo;D&amp;rsquo;, &amp;lsquo;B&amp;rsquo; would become &amp;lsquo;E&amp;rsquo;, and so on. This exercise will help you understand basic Haskell syntax, data types, and function definitions.&lt;/p></description></item></channel></rss>