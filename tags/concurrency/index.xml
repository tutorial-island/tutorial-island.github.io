<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concurrency on Tutorial Island</title><link>https://tutorial-island.github.io/tags/concurrency/</link><description>Recent content in Concurrency on Tutorial Island</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 27 Oct 2023 10:00:00 +0000</lastBuildDate><atom:link href="https://tutorial-island.github.io/tags/concurrency/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing a Simple Rate Limiter in Go</title><link>https://tutorial-island.github.io/posts/article-20250414012125/</link><pubDate>Fri, 27 Oct 2023 10:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250414012125/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today we&amp;rsquo;re going to implement a simple rate limiter in Go. Imagine you&amp;rsquo;re building an API and want to prevent abuse by limiting the number of requests a user can make within a specific timeframe. This is where rate limiting comes in. We&amp;rsquo;ll build a basic version that controls the number of requests processed per second.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>The challenge with rate limiting lies in managing concurrent requests and ensuring that we don&amp;rsquo;t exceed the allowed rate. Several problems arise:&lt;/p></description></item></channel></rss>