<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data Structures on Tutorial Island</title><link>https://tutorial-island.github.io/tags/data-structures/</link><description>Recent content in Data Structures on Tutorial Island</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 18 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://tutorial-island.github.io/tags/data-structures/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing a Simple Stack in Haskell</title><link>https://tutorial-island.github.io/posts/article-20250418011823/</link><pubDate>Fri, 18 Apr 2025 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250418011823/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we are going to implement a simple stack data structure in Haskell. A stack is a fundamental data structure that follows the Last-In-First-Out (LIFO) principle. This means the last element added to the stack is the first one to be removed. We will implement &lt;code>push&lt;/code>, &lt;code>pop&lt;/code>, and &lt;code>peek&lt;/code> operations to interact with our stack.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>The main challenge in implementing a stack in Haskell lies in its immutability. We cannot directly modify the stack in place. Instead, each operation will return a &lt;em>new&lt;/em> stack.&lt;/p></description></item><item><title>Implementing a Simple Text Analyzer in Python</title><link>https://tutorial-island.github.io/posts/article-20250417011909/</link><pubDate>Thu, 17 Apr 2025 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250417011909/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we are going to implement a simple text analyzer. This analyzer will take a string of text as input and determine the frequency of each word within that text. This is a foundational exercise that touches on several core Python concepts.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>The primary challenge in this problem lies in efficiently counting the occurrences of each word. We need to:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Clean the Text:&lt;/strong> Remove punctuation and convert the text to lowercase to ensure that &amp;ldquo;The&amp;rdquo; and &amp;ldquo;the&amp;rdquo; are treated as the same word.&lt;/li>
&lt;li>&lt;strong>Split the Text:&lt;/strong> Divide the text into individual words.&lt;/li>
&lt;li>&lt;strong>Count the Words:&lt;/strong> Store and update the count of each word. We can use a dictionary to achieve this, where the word is the key and the count is the value.&lt;/li>
&lt;li>&lt;strong>Handle Edge Cases:&lt;/strong> Consider how to deal with empty input strings or strings with only punctuation.&lt;/li>
&lt;/ol>
&lt;p>We will be utilizing the following Python functionalities:&lt;/p></description></item><item><title>Implementing a Simple Stack in TypeScript</title><link>https://tutorial-island.github.io/posts/article-20250415012045/</link><pubDate>Tue, 15 Apr 2025 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250415012045/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today we are going to implement a simple stack data structure in TypeScript. A stack is a fundamental data structure that follows the Last-In, First-Out (LIFO) principle. Imagine a stack of plates; you can only add or remove plates from the top. This tutorial will guide you through the process of creating a stack with essential functionalities like adding elements (push), removing elements (pop), and viewing the top element (peek).&lt;/p></description></item><item><title>Implementing a Simple Stack in C++</title><link>https://tutorial-island.github.io/posts/article-20250413024613/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250413024613/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today we are going to implement a simple stack data structure in C++ using an array as the underlying storage. A stack is a fundamental data structure that follows the Last-In, First-Out (LIFO) principle. This means the last element added to the stack is the first element removed. We will implement the core operations of a stack: &lt;code>push&lt;/code> (add an element), &lt;code>pop&lt;/code> (remove an element), and &lt;code>peek&lt;/code> (view the top element).&lt;/p></description></item><item><title>Implementing a Basic Shopping Cart in Swift</title><link>https://tutorial-island.github.io/posts/article-20250423012001/</link><pubDate>Thu, 29 Feb 2024 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250423012001/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we&amp;rsquo;re going to implement a simplified shopping cart system in Swift. This is a common problem in many applications, especially e-commerce. We&amp;rsquo;ll model products, a cart, and basic functionalities like adding and removing items.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>The core challenges here are:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Modeling Products:&lt;/strong> Representing products with relevant information (name, price). We need a way to store this information in a structured manner.&lt;/li>
&lt;li>&lt;strong>Managing the Cart:&lt;/strong> Maintaining a list of items in the cart and their quantities. We&amp;rsquo;ll need a data structure to efficiently add, remove, and track the total cost.&lt;/li>
&lt;li>&lt;strong>Calculating the Total:&lt;/strong> Accurately summing the prices of items in the cart, considering their quantities.&lt;/li>
&lt;/ol>
&lt;p>We&amp;rsquo;ll leverage the following Swift features:&lt;/p></description></item><item><title>Implementing a Simple Shopping Cart with TypeScript</title><link>https://tutorial-island.github.io/posts/article-20250424131701/</link><pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250424131701/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we&amp;rsquo;re going to build a rudimentary shopping cart system using TypeScript. This will involve adding items to the cart, removing items, and calculating the total cost. This exercise will help you understand how to effectively use TypeScript to manage data structures and ensure type safety in a practical scenario.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>The challenge in building a shopping cart lies in managing the items added and their quantities. We need a way to store this information, ensure that only valid products are added, and accurately calculate the total price.&lt;/p></description></item><item><title>Implementing a Simple Stack in Java</title><link>https://tutorial-island.github.io/posts/article-20250407001038/</link><pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250407001038/</guid><description>&lt;h1 id="implementing-a-simple-stack-in-java">Implementing a Simple Stack in Java&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we&amp;rsquo;re going to implement a simple Stack data structure in Java. A stack is a fundamental data structure that follows the Last-In, First-Out (LIFO) principle. Think of it like a stack of plates â€“ you always take the top plate off first. We&amp;rsquo;ll create a stack that can store integers and includes basic operations like &lt;code>push&lt;/code>, &lt;code>pop&lt;/code>, &lt;code>peek&lt;/code>, and &lt;code>isEmpty&lt;/code>.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>Implementing a stack might seem straightforward, but it presents a few challenges:&lt;/p></description></item><item><title>Implementing a Simple Text-Based Adventure Game in Rust</title><link>https://tutorial-island.github.io/posts/article-20250424133141/</link><pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250424133141/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we&amp;rsquo;re diving into Rust by building a simple text-based adventure game! This game will allow the user to navigate through a story by making choices, and the story will progress based on those choices. This is a great way to understand fundamental Rust concepts in a fun and engaging way.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>Creating a text-based adventure game presents several challenges:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>User Input:&lt;/strong> We need to read input from the user, allowing them to choose actions or answer questions. Rust&amp;rsquo;s standard input/output library (&lt;code>std::io&lt;/code>) will be crucial here.&lt;/li>
&lt;li>&lt;strong>Game State:&lt;/strong> We need to maintain the current state of the game, such as the player&amp;rsquo;s location, inventory, and health. This requires using appropriate data structures like structs and enums.&lt;/li>
&lt;li>&lt;strong>Conditional Logic:&lt;/strong> The game&amp;rsquo;s narrative will branch based on the user&amp;rsquo;s choices. &lt;code>if&lt;/code>, &lt;code>else if&lt;/code>, and &lt;code>match&lt;/code> statements will be essential for implementing this branching logic.&lt;/li>
&lt;li>&lt;strong>Output:&lt;/strong> We need to display information to the user, telling them about their surroundings, the consequences of their actions, and the current game state. We&amp;rsquo;ll use &lt;code>println!&lt;/code> for this.&lt;/li>
&lt;/ol>
&lt;p>We will use these Rust features to tackle these challenges:&lt;/p></description></item></channel></rss>