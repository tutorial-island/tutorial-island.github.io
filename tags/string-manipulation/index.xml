<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>String Manipulation on Tutorial Island</title><link>https://tutorial-island.github.io/tags/string-manipulation/</link><description>Recent content in String Manipulation on Tutorial Island</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 25 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://tutorial-island.github.io/tags/string-manipulation/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a Simple URL Shortener in Elixir</title><link>https://tutorial-island.github.io/posts/article-20250425082635/</link><pubDate>Fri, 25 Apr 2025 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250425082635/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we&amp;rsquo;re going to build a very simple URL shortener in Elixir. Imagine you have a really long URL, something like &lt;code>https://www.example.com/very/long/path/with/lots/of/parameters?utm_source=newsletter&amp;amp;utm_medium=email&amp;amp;utm_campaign=promotion&lt;/code>. We want to create a shorter, more manageable URL that redirects to this original one. We&amp;rsquo;ll focus on the core logic of generating a short code and associating it with the long URL, without delving into database persistence or web frameworks.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>The core challenge of a URL shortener lies in generating unique short codes and associating them with their corresponding long URLs. For this example, we&amp;rsquo;ll focus on generating a short code from a seed.&lt;/p></description></item></channel></rss>