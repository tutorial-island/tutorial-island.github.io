<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functional Programming on Tutorial Island</title><link>https://tutorial-island.github.io/tags/functional-programming/</link><description>Recent content in Functional Programming on Tutorial Island</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 18 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://tutorial-island.github.io/tags/functional-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Implementing a Simple Stack in Haskell</title><link>https://tutorial-island.github.io/posts/article-20250418011823/</link><pubDate>Fri, 18 Apr 2025 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250418011823/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we are going to implement a simple stack data structure in Haskell. A stack is a fundamental data structure that follows the Last-In-First-Out (LIFO) principle. This means the last element added to the stack is the first one to be removed. We will implement &lt;code>push&lt;/code>, &lt;code>pop&lt;/code>, and &lt;code>peek&lt;/code> operations to interact with our stack.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>The main challenge in implementing a stack in Haskell lies in its immutability. We cannot directly modify the stack in place. Instead, each operation will return a &lt;em>new&lt;/em> stack.&lt;/p></description></item><item><title>Building a Simple Command Line Calculator in Haskell</title><link>https://tutorial-island.github.io/posts/article-20250422011934/</link><pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250422011934/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we are going to implement a simple command-line calculator using Haskell. This calculator will take an expression as input (e.g., &amp;ldquo;2 + 3&amp;rdquo;) and output the result. This exercise will introduce us to parsing user input, handling potential errors, and performing basic arithmetic operations, all within the elegant framework of Haskell.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>The creation of a command-line calculator introduces several challenges:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Parsing User Input:&lt;/strong> We need to take the string input provided by the user and transform it into a data structure that our program can understand and work with. This involves breaking down the input string into numbers and operators.&lt;/p></description></item><item><title>Working with Records in Haskell: Building a Simple Product Catalog</title><link>https://tutorial-island.github.io/posts/article-20250409011813/</link><pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate><guid>https://tutorial-island.github.io/posts/article-20250409011813/</guid><description>&lt;h1 id="working-with-records-in-haskell-building-a-simple-product-catalog">Working with Records in Haskell: Building a Simple Product Catalog&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Today, we&amp;rsquo;re going to dive into Haskell records by building a simple product catalog. Imagine you&amp;rsquo;re building an e-commerce site. You need a way to represent products, each with a name, price, and a stock quantity. Haskell&amp;rsquo;s record syntax provides a clean and structured way to do this. We&amp;rsquo;ll walk through how to define, create, and manipulate records to manage our product information.&lt;/p></description></item></channel></rss>